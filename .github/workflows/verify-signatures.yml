name: Verify signatures
on:
  push:
    branches: ["main", "dev", "release/*"]
  pull_request:

jobs:
  verify:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    env:
      ALLOWED_USERS: "samuel22991,teammate1"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine commit range
        id: range
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "range=${{ github.event.pull_request.base.sha }}..${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            # new branch pushes may have empty before; fall back to last 50 commits
            if [ -n "${{ github.event.before }}" ] && [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
              echo "range=${{ github.event.before }}..${{ github.sha }}" >> $GITHUB_OUTPUT
            else
              echo "range=$(git rev-list --max-count=50 ${{ github.sha }})" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Verify commits via GitHub API
        shell: bash
        run: |
          IFS=',' read -r -a allow <<< "$ALLOWED_USERS"
          ok_users_regex="$(printf "(^%s$)|" "${allow[@]}" | sed 's/|$//')"

          fails=0
          range="${{ steps.range.outputs.range }}"
          echo "Checking range: $range"

          # Build the list of SHAs to check
          if [[ "$range" == *".."* ]]; then
            COMMITS=$(git rev-list "$range")
          else
            COMMITS="$range"
          fi

          for sha in $COMMITS; do
            echo "Commit $sha"
            # Get commit info from GitHub REST API
            resp=$(curl -s -H "Accept: application/vnd.github+json" \
                        -H "Authorization: Bearer ${{ github.token }}" \
                        "${{ github.api_url }}/repos/${{ github.repository }}/commits/$sha")

            author_login=$(echo "$resp" | jq -r '.author.login // .commit.author.name')
            verified=$(echo "$resp" | jq -r '.commit.verification.verified')
            reason=$(echo "$resp" | jq -r '.commit.verification.reason')

            # Require verified==true and author in allow list
            if [ "$verified" != "true" ]; then
              echo "::error::Commit $sha not verified. Reason: $reason"
              fails=$((fails+1))
            fi

            if ! [[ "$author_login" =~ $ok_users_regex ]]; then
              echo "::error::Commit $sha by $author_login is not in ALLOWED_USERS"
              fails=$((fails+1))
            fi
          done

          if [ "$fails" -gt 0 ]; then
            echo "::error::Signature policy failed on $fails checks"
            exit 1
          fi
